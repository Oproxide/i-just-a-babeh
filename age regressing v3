--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 43) then
					if (Enum <= 21) then
						if (Enum <= 10) then
							if (Enum <= 4) then
								if (Enum <= 1) then
									if (Enum == 0) then
										VIP = Inst[3];
									else
										Stk[Inst[2]] = Upvalues[Inst[3]];
									end
								elseif (Enum <= 2) then
									for Idx = Inst[2], Inst[3] do
										Stk[Idx] = nil;
									end
								elseif (Enum == 3) then
									local A = Inst[2];
									Stk[A](Unpack(Stk, A + 1, Inst[3]));
								else
									Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
								end
							elseif (Enum <= 7) then
								if (Enum <= 5) then
									if (Stk[Inst[2]] == Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum == 6) then
									if (Stk[Inst[2]] ~= Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local A = Inst[2];
									Stk[A] = Stk[A](Stk[A + 1]);
								end
							elseif (Enum <= 8) then
								Stk[Inst[2]][Inst[3]] = Inst[4];
							elseif (Enum > 9) then
								Stk[Inst[2]] = Stk[Inst[3]];
							else
								Stk[Inst[2]] = Env[Inst[3]];
							end
						elseif (Enum <= 15) then
							if (Enum <= 12) then
								if (Enum == 11) then
									if (Stk[Inst[2]] < Inst[4]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									Stk[Inst[2]][Stk[Inst[3]]] = Stk[Inst[4]];
								end
							elseif (Enum <= 13) then
								if (Stk[Inst[2]] ~= Stk[Inst[4]]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum > 14) then
								Stk[Inst[2]] = Env[Inst[3]];
							else
								Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
							end
						elseif (Enum <= 18) then
							if (Enum <= 16) then
								Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
							elseif (Enum == 17) then
								local A = Inst[2];
								Stk[A] = Stk[A]();
							else
								do
									return;
								end
							end
						elseif (Enum <= 19) then
							Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
						elseif (Enum > 20) then
							local A = Inst[2];
							do
								return Unpack(Stk, A, Top);
							end
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 32) then
						if (Enum <= 26) then
							if (Enum <= 23) then
								if (Enum > 22) then
									local A = Inst[2];
									Stk[A] = Stk[A]();
								else
									local A = Inst[2];
									local Results = {Stk[A](Stk[A + 1])};
									local Edx = 0;
									for Idx = A, Inst[4] do
										Edx = Edx + 1;
										Stk[Idx] = Results[Edx];
									end
								end
							elseif (Enum <= 24) then
								do
									return Stk[Inst[2]];
								end
							elseif (Enum == 25) then
								Env[Inst[3]] = Stk[Inst[2]];
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum <= 29) then
							if (Enum <= 27) then
								if not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum == 28) then
								Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
							else
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						elseif (Enum <= 30) then
							Stk[Inst[2]] = Stk[Inst[3]] * Inst[4];
						elseif (Enum == 31) then
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						elseif (Stk[Inst[2]] == Inst[4]) then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 37) then
						if (Enum <= 34) then
							if (Enum > 33) then
								local A = Inst[2];
								do
									return Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							else
								local A = Inst[2];
								Stk[A](Stk[A + 1]);
							end
						elseif (Enum <= 35) then
							Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
						elseif (Enum > 36) then
							if (Stk[Inst[2]] < Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
						end
					elseif (Enum <= 40) then
						if (Enum <= 38) then
							do
								return Stk[Inst[2]]();
							end
						elseif (Enum > 39) then
							local A = Inst[2];
							do
								return Unpack(Stk, A, Top);
							end
						else
							local A = Inst[2];
							local Step = Stk[A + 2];
							local Index = Stk[A] + Step;
							Stk[A] = Index;
							if (Step > 0) then
								if (Index <= Stk[A + 1]) then
									VIP = Inst[3];
									Stk[A + 3] = Index;
								end
							elseif (Index >= Stk[A + 1]) then
								VIP = Inst[3];
								Stk[A + 3] = Index;
							end
						end
					elseif (Enum <= 41) then
						Stk[Inst[2]] = #Stk[Inst[3]];
					elseif (Enum == 42) then
						Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
					else
						Stk[Inst[2]] = Upvalues[Inst[3]];
					end
				elseif (Enum <= 65) then
					if (Enum <= 54) then
						if (Enum <= 48) then
							if (Enum <= 45) then
								if (Enum > 44) then
									do
										return Stk[Inst[2]];
									end
								else
									local A = Inst[2];
									Stk[A](Stk[A + 1]);
								end
							elseif (Enum <= 46) then
								VIP = Inst[3];
							elseif (Enum > 47) then
								Stk[Inst[2]] = Stk[Inst[3]] % Inst[4];
							else
								Env[Inst[3]] = Stk[Inst[2]];
							end
						elseif (Enum <= 51) then
							if (Enum <= 49) then
								if not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum == 50) then
								Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
							else
								local A = Inst[2];
								do
									return Unpack(Stk, A, A + Inst[3]);
								end
							end
						elseif (Enum <= 52) then
							Stk[Inst[2]] = Stk[Inst[3]];
						elseif (Enum > 53) then
							if (Stk[Inst[2]] ~= Inst[4]) then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						else
							local A = Inst[2];
							do
								return Stk[A](Unpack(Stk, A + 1, Inst[3]));
							end
						end
					elseif (Enum <= 59) then
						if (Enum <= 56) then
							if (Enum == 55) then
								Stk[Inst[2]]();
							else
								Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
							end
						elseif (Enum <= 57) then
							Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
						elseif (Enum == 58) then
							Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
						else
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					elseif (Enum <= 62) then
						if (Enum <= 60) then
							if Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum > 61) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 52) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						else
							Stk[Inst[2]] = Stk[Inst[3]] + Stk[Inst[4]];
						end
					elseif (Enum <= 63) then
						Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
					elseif (Enum == 64) then
						local NewProto = Proto[Inst[3]];
						local NewUvals;
						local Indexes = {};
						NewUvals = Setmetatable({}, {__index=function(_, Key)
							local Val = Indexes[Key];
							return Val[1][Val[2]];
						end,__newindex=function(_, Key, Value)
							local Val = Indexes[Key];
							Val[1][Val[2]] = Value;
						end});
						for Idx = 1, Inst[4] do
							VIP = VIP + 1;
							local Mvm = Instr[VIP];
							if (Mvm[1] == 52) then
								Indexes[Idx - 1] = {Stk,Mvm[3]};
							else
								Indexes[Idx - 1] = {Upvalues,Mvm[3]};
							end
							Lupvals[#Lupvals + 1] = Indexes;
						end
						Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
					else
						Stk[Inst[2]] = Inst[3];
					end
				elseif (Enum <= 76) then
					if (Enum <= 70) then
						if (Enum <= 67) then
							if (Enum == 66) then
								Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
							else
								Stk[Inst[2]] = {};
							end
						elseif (Enum <= 68) then
							Stk[Inst[2]] = Stk[Inst[3]] - Stk[Inst[4]];
						elseif (Enum > 69) then
							Stk[Inst[2]][Inst[3]] = Inst[4];
						else
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						end
					elseif (Enum <= 73) then
						if (Enum <= 71) then
							local A = Inst[2];
							local Index = Stk[A];
							local Step = Stk[A + 2];
							if (Step > 0) then
								if (Index > Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							elseif (Index < Stk[A + 1]) then
								VIP = Inst[3];
							else
								Stk[A + 3] = Index;
							end
						elseif (Enum > 72) then
							Stk[Inst[2]] = Stk[Inst[3]] % Stk[Inst[4]];
						else
							Stk[Inst[2]] = Inst[3];
						end
					elseif (Enum <= 74) then
						if Stk[Inst[2]] then
							VIP = VIP + 1;
						else
							VIP = Inst[3];
						end
					elseif (Enum == 75) then
						Stk[Inst[2]] = {};
					else
						do
							return;
						end
					end
				elseif (Enum <= 82) then
					if (Enum <= 79) then
						if (Enum <= 77) then
							for Idx = Inst[2], Inst[3] do
								Stk[Idx] = nil;
							end
						elseif (Enum == 78) then
							local A = Inst[2];
							local Index = Stk[A];
							local Step = Stk[A + 2];
							if (Step > 0) then
								if (Index > Stk[A + 1]) then
									VIP = Inst[3];
								else
									Stk[A + 3] = Index;
								end
							elseif (Index < Stk[A + 1]) then
								VIP = Inst[3];
							else
								Stk[A + 3] = Index;
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]] + Inst[4];
						end
					elseif (Enum <= 80) then
						do
							return Stk[Inst[2]]();
						end
					elseif (Enum > 81) then
						Stk[Inst[2]] = #Stk[Inst[3]];
					else
						local A = Inst[2];
						local Results = {Stk[A](Stk[A + 1])};
						local Edx = 0;
						for Idx = A, Inst[4] do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					end
				elseif (Enum <= 85) then
					if (Enum <= 83) then
						Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
					elseif (Enum == 84) then
						local A = Inst[2];
						local B = Stk[Inst[3]];
						Stk[A + 1] = B;
						Stk[A] = B[Inst[4]];
					elseif (Stk[Inst[2]] ~= Inst[4]) then
						VIP = VIP + 1;
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 86) then
					Stk[Inst[2]]();
				elseif (Enum == 87) then
					local A = Inst[2];
					local B = Stk[Inst[3]];
					Stk[A + 1] = B;
					Stk[A] = B[Inst[4]];
				else
					local A = Inst[2];
					local Step = Stk[A + 2];
					local Index = Stk[A] + Step;
					Stk[A] = Index;
					if (Step > 0) then
						if (Index <= Stk[A + 1]) then
							VIP = Inst[3];
							Stk[A + 3] = Index;
						end
					elseif (Index >= Stk[A + 1]) then
						VIP = Inst[3];
						Stk[A + 3] = Index;
					end
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCall("LOL!133Q0003043Q007461736B03043Q0077616974027Q004003023Q005F47030C3Q00616C726561647972613Q6E2Q0103073Q0067657466656E76028Q00030A3Q006C6F6164737472696E6703043Q007479706503083Q0066756E6374696F6E03083Q00746F737472696E6703043Q0066696E6403053Q007072696E742Q033Q00307830030C3Q007365746D6574617461626C65030A3Q002Q5F6E6577696E64657803043Q006769766503013Q006C00443Q0012093Q00013Q0020455Q0002001241000100034Q00213Q000200010012093Q00043Q0020455Q00050026203Q00090001000600044Q000900012Q004C3Q00013Q0012093Q00043Q0030083Q000500062Q004B7Q001209000100073Q00063C0001001400013Q00044Q00140001001209000100073Q001241000200084Q0014000100020002000631000100150001000100044Q00150001001209000100043Q0020450001000100090012090002000A4Q000A000300014Q00140002000200020026200002002B0001000B00044Q002B00010012090002000C4Q000A000300014Q001400020002000200205700020002000D0012410004000E4Q001A0002000400020006310002002B0001000100044Q002B00010012090002000C4Q000A000300014Q001400020002000200205700020002000D0012410004000F4Q001A00020004000200063C0002002C00013Q00044Q002C00012Q004D000100013Q001209000200103Q001209000300044Q004B00043Q000100023800055Q00103F0004001100052Q000300020004000100063E00020001000100012Q00343Q00013Q000238000300023Q000238000400033Q001219000400123Q001209000400124Q0017000400010002000238000500043Q00063E00060005000100022Q00343Q00054Q00343Q00033Q00063E00070006000100032Q00343Q00044Q00343Q00064Q00343Q00023Q00103F3Q001300072Q00183Q00024Q004C3Q00013Q00073Q00023Q00030A3Q006C6F6164737472696E6703063Q0072617773657403093Q002620000100030001000100044Q000300012Q004C3Q00013Q001209000300024Q000A00046Q000A000500014Q000A000600024Q00030003000600012Q004C3Q00019Q003Q00094Q002B7Q0006313Q00050001000100044Q000500010002388Q00183Q00023Q00063E3Q0001000100012Q00018Q00183Q00024Q004C3Q00013Q00028Q00033Q0002388Q00183Q00024Q004C3Q00013Q00018Q00014Q004C3Q00017Q00013Q00034Q0001113Q00063C3Q000400013Q00044Q000400010026203Q00060001000100044Q0006000100023800016Q0018000100024Q002B00016Q000A00026Q005100010002000200063C0001000D00013Q00044Q000D000100063C0002000F00013Q00044Q000F0001000238000300014Q0018000300024Q0018000100024Q004C3Q00013Q00028Q00014Q004C3Q00019Q003Q00014Q004C3Q00017Q00093Q00026Q00F03F027Q004003083Q00746F6E756D6265722Q033Q00737562026Q00304003063Q00737472696E6703043Q006368617203053Q007461626C6503063Q00636F6E636174011A4Q004B00015Q001241000200014Q002900035Q001241000400023Q000447000200140001001209000600033Q00205700073Q00042Q000A000900053Q00204F000A000500012Q001A0007000A0002001241000800054Q001A0006000800022Q0029000700013Q00204F000700070001001209000800063Q0020450008000800072Q000A000900064Q00140008000200022Q0004000100070008000427000200050001001209000200083Q0020450002000200092Q000A000300014Q0035000200034Q001500026Q004C3Q00017Q00033Q0003023Q005F4703013Q007A03073Q0073616E64626F78000A3Q0012093Q00013Q0020455Q00020006313Q00060001000100044Q000600010012413Q00034Q00183Q00023Q0012093Q00013Q0020455Q00022Q00183Q00024Q004C3Q00017Q000D3Q0003083Q00746F6E756D626572026Q004540026Q00F03F03053Q00626974333203043Q0062786F7203063Q00737472696E6703043Q0062797465028Q00026Q003F40025Q00288F40022Q00E03QFFEF4103063Q00666F726D617403043Q002530387802233Q001209000200014Q000A000300014Q0014000200020002000631000200060001000100044Q00060001001241000200023Q001241000300034Q002900045Q001241000500033Q0004470003001C0001001209000700043Q0020450007000700052Q000A000800023Q001209000900063Q0020450009000900072Q000A000A6Q000A000B00064Q001A0009000B0002000631000900150001000100044Q00150001001241000900084Q001A0007000900022Q000A000200073Q00201E00070002000900201E00080006000A2Q001300070007000800202400020007000B0004270003000A0001001209000300063Q00204500030003000C0012410004000D4Q000A000500024Q0035000300054Q001500036Q004C3Q00017Q00103Q00026Q002040034Q002Q033Q00737562026Q0020C0026Q00F03F026Q0022C0028Q00026Q00084003063Q00737472696E6703043Q0062797465026Q00704003043Q006368617203053Q00626974333203043Q0062786F7203053Q007461626C6503063Q00636F6E636174026A4Q002900025Q002625000200050001000100044Q00050001001241000200024Q0018000200023Q00205700023Q0003001241000400044Q001A00020004000200205700033Q0003001241000500053Q001241000600064Q001A0003000600022Q002B00046Q000A000500034Q000A000600014Q001A00040006000200060D000200140001000400044Q00140001001241000500024Q0018000500024Q002B000500014Q000A000600034Q00140005000200022Q0029000600053Q0026200006001C0001000700044Q001C0001001241000600024Q0018000600023Q00023800066Q000A000700064Q000A000800014Q0029000900053Q00201E0009000900082Q001A0007000900022Q004B00085Q001241000900053Q001241000A00054Q0029000B00053Q001241000C00053Q000447000A003A0001001209000E00093Q002045000E000E000A2Q000A000F00054Q000A0010000D4Q001A000E0010000200201E000F000D00082Q0044000F000E000F2Q0029001000054Q001300100010000D2Q00100010000700102Q0044000F000F0010002024000F000F000B001209001000093Q00204500100010000C2Q000A0011000F4Q00140010000200022Q00040008000D0010000427000A00280001001241000A00073Q001241000B00054Q0029000C00083Q001241000D00053Q000447000B00500001001209000F00093Q002045000F000F000A2Q001000100008000E2Q0014000F000200020012090010000D3Q00204500100010000E2Q000A0011000F4Q000A0012000A4Q001A0010001200022Q00130011000A0010002024000A0011000B001209001100093Q00204500110011000C2Q000A001200104Q00140011000200022Q00040008000E0011000427000B003F0001001241000B00054Q0029000C00083Q001241000D00053Q000447000B00640001001209000F00093Q002045000F000F000A2Q001000100008000E2Q0014000F000200020012090010000D3Q00204500100010000E2Q000A0011000F4Q00100012000700092Q001A001000120002001209001100093Q00204500110011000C2Q000A001200104Q00140011000200022Q00040008000E001100204F000900090005000427000B00540001001209000B000F3Q002045000B000B00102Q000A000C00084Q0035000B000C4Q0015000B6Q004C3Q00013Q00013Q000B3Q0003083Q00746F737472696E67028Q00026Q00F03F03063Q00737472696E6703043Q0062797465026Q003F40025Q00288F40026Q00704003053Q00626974333203043Q0062786F72026Q001C4002324Q004B00025Q001209000300014Q000A00046Q0014000300020002001241000400023Q001241000500034Q000A000600013Q001241000700033Q000447000500300001001209000900043Q0020450009000900052Q000A000A00034Q0029000B00034Q0049000B0008000B00204F000B000B00032Q001A0009000B0002000631000900130001000100044Q00130001001241000900023Q00201E000A000400062Q0013000A000A000900201E000B000800072Q0013000A000A000B0020240004000A00082Q0039000A000800092Q0013000A000A00042Q0029000B00034Q0049000A000A000B00204F000A000A0003001209000B00043Q002045000B000B00052Q000A000C00034Q000A000D000A4Q001A000B000D0002000631000B00250001000100044Q00250001001241000B00023Q001209000C00093Q002045000C000C000A2Q000A000D000B4Q000A000E00043Q002024000F000800082Q001A000C000F000200201E000D0008000B2Q0013000D000C000D002024000D000D00082Q000400020008000D0004270005000900012Q0018000200024Q004C3Q00017Q00093Q0003053Q007063612Q6C03073Q0073616E64626F78026Q003E4003043Q007761726E03183Q004A61727669732C20636C697020746861742E20F09FA4A331034Q0003043Q007479706503083Q0066756E6374696F6E03183Q004A61727669732C20636C697020746861742E20F09FA4A33201293Q001209000100013Q00023800026Q00140001000200022Q002B00025Q0026550002000A0001000200044Q000A00012Q002B00026Q0029000200023Q0026250002000E0001000300044Q000E0001001209000200043Q001241000300054Q00210002000200012Q004C3Q00013Q00063C0001002800013Q00044Q002800012Q002B000200014Q000A00036Q002B00046Q001A00020004000200063C0002002500013Q00044Q00250001002655000200250001000600044Q002500012Q002B000300024Q00170003000100022Q000A000400034Q000A000500024Q0014000400020002001209000500074Q000A000600044Q0014000500020002002620000500280001000800044Q002800012Q000A000500044Q005600050001000100044Q00280001001209000300043Q001241000400094Q00210003000200012Q004C3Q00013Q00013Q00023Q00030A3Q006C6F6164737472696E6703403Q0072657475726E2022682Q7470733A2Q2F657269737970682E6E656F6369746965732E6F72672F3F6769643D4F424655534341544F525F444543525950544F522200063Q0012093Q00013Q001241000100024Q00143Q000200022Q00263Q00014Q00158Q004C3Q00017Q00", GetFEnv(), ...);
